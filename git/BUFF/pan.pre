# 0 "packetbuf.pml"
# 0 "<built-in>"
# 0 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 0 "<command-line>" 2
# 1 "packetbuf.pml"





byte packetbuf[128];
byte packetbuf_attrs[10];
byte packetbuf_addrs[5];
byte buflen = 0;
byte hdrlen = 0;
byte bufptr = 0;


inline min(a, b) { (a < b) -> a : b; }


inline packetbuf_clear() {
    buflen = 0;
    hdrlen = 0;
    bufptr = 0;

    int i = 0;
    do
    :: (i < 128) -> packetbuf[i] = 0; i++
    :: else -> break
    od;
}


inline packetbuf_copyfrom(len) {
    packetbuf_clear();
    buflen = min(128, len);

    byte i = 0;
    do
    :: (i < buflen) ->
        packetbuf[i] = i;
        i++
    :: else -> break
    od;
}


inline packetbuf_copyto() {
    if (hdrlen + buflen > 128) {
        buflen = 0;
        hdrlen = 0;
    }
}


inline packetbuf_hdralloc(size) {
    if ((size + packetbuf_totlen()) <= 128) {
        byte i = packetbuf_totlen() - 1;
        do
        :: (i >= 0) ->
            packetbuf[i + size] = packetbuf[i];
            i--
        :: else -> break
        od;
        hdrlen += size;
    }
}


inline packetbuf_hdrreduce(size) {
    if (buflen >= size) {
        bufptr += size;
        buflen -= size;
    }
}


inline packetbuf_set_datalen(len) {
    buflen = len;
}


inline packetbuf_dataptr() {
    return packetbuf + hdrlen;
}


inline packetbuf_hdrptr() {
    return packetbuf;
}


inline packetbuf_datalen() {
    return buflen;
}


inline packetbuf_hdrlen() {
    return hdrlen;
}


inline packetbuf_totlen() {
    return hdrlen + buflen;
}


inline packetbuf_remaininglen() {
    return 128 - packetbuf_totlen();
}


inline packetbuf_attr_clear() {
    int i = 0;
    do
    :: (i < 10) -> packetbuf_attrs[i] = 0; i++
    :: else -> break
    od;
    i = 0;
    do
    :: (i < 5) -> packetbuf_addrs[i] = 0; i++
    :: else -> break
    od;
}


init {

    packetbuf_clear();
    packetbuf_copyfrom(10);

    assert(buflen == 10);

    packetbuf_hdralloc(5);
    assert(hdrlen == 5);

    packetbuf_hdrreduce(2);
    assert(hdrlen == 3);

    packetbuf_clear();
    assert(buflen == 0);
}
